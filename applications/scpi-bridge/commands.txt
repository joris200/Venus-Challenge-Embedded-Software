To get debug output, add `-d` on the commandline.
To get more debug output, add multiple `-d` on the commandline.



:SWITCHBOX:RST
:SWITCHBOX:MAP? {PIN}
:SWITCHBOX:MAP  {PIN}, {MODULE}

:GPIO:RST
:GPIO:LEVEL {LEVEL}
:GPIO:LEVEL?
:GPIO:DIR {PIN},{DIRECTION}
:GPIO:DIR? {PIN}

# Print a message on the display. Use ~ for new line
# Maximum 6 lines with 20 characters per line.
:DISPLAY:MESSAGE '{Hello World}'

# Set the PYNQ board system time
:SYSTEM:TIMESET 'YYYYMMDDHHmmss'
# Shut down the PYNQ board
:SYSTEM:SHUTDOWN

:PWM#:PERIOD {UINT32}
:PWM#:PERIOD?

:PWM#:DUTY {UINT32}
:PWM#:DUTY?

:PWM#:STEPS?
:PWM#:STEPS {UINT32} 

The unit of period/duty cycle is in number of clock cycles.
The clock is running at 100MHz.

# Query the frequency response on the audio ports
:FRESPONSE:Ping? {FREQ}, {NUMPERIODS}

:ADC:READ? {ADC_CHANNEL}
:ADC:RAW? {ADC_CHANNEL}

:UART#:RECV?
:UART#:SEND {string}
:UART#:SSpace?
:UART#:RData?
:UART#:RST

# Query the number of edges counted on pin {PIN}
# 2nd value is the time since last enabled in seconds (or until disabled)
:COUNTER? {PIN} 
# Enable counting on pin {PIN}
:COUNTER:ENABLE {PIN}
:COUNTER:DISABLE {PIN}
# Reset the pin count to 0.
:COUNTER:RESET {PIN}


:COUNTER:INTERVAL? {PIN}
# Resets first timestamp/interval.
:COUNTER:INTERVAL:ENABLE {PIN}
:COUNTER:INTERVAL:DISABLE {PIN}
:COUNTER:EDGE {PIN},{EDGE}


:PULSECOUNTER#:Reset
Reset the count back to 0
:PULSECOUNTER#:Count?
Returns the current count and the time since last query.
The time is only valid on 2nd read and the time between queries should be less then 42 seconds.
:PULSECOUNTER#:EDGE?
Returns the level after the edge it triggers on (High for rising, Low for falling edge)
It requires 10 cycles of stable signal for it to count as pulse.
:PULSECOUNTER#:Edge {LEVEL}

# EDGE
* Both
* Falling
* Rising
  
# DIRECTION:
* OUTput
* INput

# LEVEL:
* Low
* High

# PINS:
* AR0
* AR1
* AR2
* AR3
* AR4
* AR5
* AR6
* AR7
* AR8
* AR9
* AR10
* AR11
* AR12
* AR13
* A0
* A1
* A2
* A3
* A4
* A5
* SW0
* SW1
* BTN0
* BTN1
* BTN2
* BTN3
* LD0
* LD1
* LD2
* LD3
* AR_SDA
* AR_SCL

#MODULES
* GPIO
* UART0_TX
* UART0_RX
* SPI0_CLK
* SPI0_MISO
* SPI0_MOSI
* SPI0_SS
* SPI1_SPICLK
* SPI1_MISO
* SPI1_MOSI
* SPI1_SS
* IIC0_SDA
* IIC0_SCL
* IIC1_SDA
* IIC1_SCL
* PWM0
* PWM1
* UART1_TX
* UART1_RX
* PULSECOUNTER0
* PULSECOUNTER1

# ADC_CHANNEL
* A0
* A1
* A2
* A3
* A4
* A5


ADS1115

Do not forget to set switchbox to right pins! for IIC0_SCL and IIC0_SDA

    * ADS1115:INIT {ADDR}
    * ADS1115:CHannel {CHANNEL} 
    * ADS1115:CHannel? -> CHANNEL
    * ADS1115:RATE {RATE}
    * ADS1115:RATE? -> RATE
    * ADS1115:RANGE {RANGE}
    * ADS1115:RANGE?  -> RANGE
    * ADS1115:Voltread? -> float
    * ADS1115:Rawread? -> int
    * ADS1115:ADDChannel {CHANNEL},{RANGE} --> Add channel to be sampled in separate thread.
    * ADS1115:CLEARChannel --> Clear channels sampled from separate thread.
    * ADS1115:RUn {DELAY}
    -> Start sampling in a separate thread. Delay between end of prev. sample and start of new (in usec). (TODO to fix)
    * ADS1115:STop -> Stop sampling in a separate thread.
    * ADS1115:Samples? -> Get samples from separate thread (10000 max buffer)



Voltage Range. (Depends on V input what is actually working, see ads1115 datasheet)
 * V6P144
 * V4P096
 * V2P048
 * V1P024
 * V0P512
 * V0P256

Sample rate rate:
 * SPS8
 * SPS16
 * SPS32
 * SPS64
 * SPS128
 * SPS250
 * SPS475
 * SPS860

Channel to measure:
 * A0TA1 - AIN0 AIN1 
 * A0TA3 - AIN0 AIN3
 * A1TA3 - AIN1 AIN3
 * A2TA3 - AIN2 AIN3
 * A0TG  - AIN0 GND
 * A1TG  - AIN1 GND 
 * A2TG  - AIN2 GND 
 * A3TG  - AIN3 GND 


